/**
 * generated by Xtext 2.16.0
 */
package fr.inria.diverse.networkModelTest.impl;

import fr.inria.diverse.networkModelTest.Binding;
import fr.inria.diverse.networkModelTest.Config;
import fr.inria.diverse.networkModelTest.NetworkModelTestPackage;
import fr.inria.diverse.networkModelTest.Node;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.ConfigImpl#getSuperType <em>Super Type</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.ConfigImpl#getNode <em>Node</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.ConfigImpl#getBinding <em>Binding</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigImpl extends TypeImpl implements Config
{
  /**
   * The cached value of the '{@link #getSuperType() <em>Super Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperType()
   * @generated
   * @ordered
   */
  protected Config superType;

  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected EList<Node> node;

  /**
   * The cached value of the '{@link #getBinding() <em>Binding</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinding()
   * @generated
   * @ordered
   */
  protected EList<Binding> binding;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NetworkModelTestPackage.Literals.CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Config getSuperType()
  {
    if (superType != null && superType.eIsProxy())
    {
      InternalEObject oldSuperType = (InternalEObject)superType;
      superType = (Config)eResolveProxy(oldSuperType);
      if (superType != oldSuperType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, NetworkModelTestPackage.CONFIG__SUPER_TYPE, oldSuperType, superType));
      }
    }
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Config basicGetSuperType()
  {
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuperType(Config newSuperType)
  {
    Config oldSuperType = superType;
    superType = newSuperType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.CONFIG__SUPER_TYPE, oldSuperType, superType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Node> getNode()
  {
    if (node == null)
    {
      node = new EObjectContainmentEList<Node>(Node.class, this, NetworkModelTestPackage.CONFIG__NODE);
    }
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Binding> getBinding()
  {
    if (binding == null)
    {
      binding = new EObjectContainmentEList<Binding>(Binding.class, this, NetworkModelTestPackage.CONFIG__BINDING);
    }
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.CONFIG__NODE:
        return ((InternalEList<?>)getNode()).basicRemove(otherEnd, msgs);
      case NetworkModelTestPackage.CONFIG__BINDING:
        return ((InternalEList<?>)getBinding()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.CONFIG__SUPER_TYPE:
        if (resolve) return getSuperType();
        return basicGetSuperType();
      case NetworkModelTestPackage.CONFIG__NODE:
        return getNode();
      case NetworkModelTestPackage.CONFIG__BINDING:
        return getBinding();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.CONFIG__SUPER_TYPE:
        setSuperType((Config)newValue);
        return;
      case NetworkModelTestPackage.CONFIG__NODE:
        getNode().clear();
        getNode().addAll((Collection<? extends Node>)newValue);
        return;
      case NetworkModelTestPackage.CONFIG__BINDING:
        getBinding().clear();
        getBinding().addAll((Collection<? extends Binding>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.CONFIG__SUPER_TYPE:
        setSuperType((Config)null);
        return;
      case NetworkModelTestPackage.CONFIG__NODE:
        getNode().clear();
        return;
      case NetworkModelTestPackage.CONFIG__BINDING:
        getBinding().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.CONFIG__SUPER_TYPE:
        return superType != null;
      case NetworkModelTestPackage.CONFIG__NODE:
        return node != null && !node.isEmpty();
      case NetworkModelTestPackage.CONFIG__BINDING:
        return binding != null && !binding.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ConfigImpl
