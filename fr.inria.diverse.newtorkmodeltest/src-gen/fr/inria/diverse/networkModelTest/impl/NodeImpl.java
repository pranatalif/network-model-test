/**
 * generated by Xtext 2.16.0
 */
package fr.inria.diverse.networkModelTest.impl;

import fr.inria.diverse.networkModelTest.NetworkModelTestPackage;
import fr.inria.diverse.networkModelTest.Node;
import fr.inria.diverse.networkModelTest.NodeType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodetype <em>Nodetype</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNode <em>Node</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getImage <em>Image</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodeName <em>Node Name</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodeID <em>Node ID</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodeIP <em>Node IP</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeImpl extends MinimalEObjectImpl.Container implements Node
{
  /**
   * The cached value of the '{@link #getNodetype() <em>Nodetype</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodetype()
   * @generated
   * @ordered
   */
  protected EList<NodeType> nodetype;

  /**
   * The default value of the '{@link #getNode() <em>Node</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected static final String NODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected String node = NODE_EDEFAULT;

  /**
   * The default value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected static final String IMAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected String image = IMAGE_EDEFAULT;

  /**
   * The cached value of the '{@link #getNodeName() <em>Node Name</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeName()
   * @generated
   * @ordered
   */
  protected EList<String> nodeName;

  /**
   * The cached value of the '{@link #getNodeID() <em>Node ID</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeID()
   * @generated
   * @ordered
   */
  protected EList<String> nodeID;

  /**
   * The cached value of the '{@link #getNodeIP() <em>Node IP</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeIP()
   * @generated
   * @ordered
   */
  protected EList<String> nodeIP;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NetworkModelTestPackage.Literals.NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NodeType> getNodetype()
  {
    if (nodetype == null)
    {
      nodetype = new EObjectContainmentEList<NodeType>(NodeType.class, this, NetworkModelTestPackage.NODE__NODETYPE);
    }
    return nodetype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNode()
  {
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNode(String newNode)
  {
    String oldNode = node;
    node = newNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__NODE, oldNode, node));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getImage()
  {
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImage(String newImage)
  {
    String oldImage = image;
    image = newImage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__IMAGE, oldImage, image));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getNodeName()
  {
    if (nodeName == null)
    {
      nodeName = new EDataTypeEList<String>(String.class, this, NetworkModelTestPackage.NODE__NODE_NAME);
    }
    return nodeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getNodeID()
  {
    if (nodeID == null)
    {
      nodeID = new EDataTypeEList<String>(String.class, this, NetworkModelTestPackage.NODE__NODE_ID);
    }
    return nodeID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getNodeIP()
  {
    if (nodeIP == null)
    {
      nodeIP = new EDataTypeEList<String>(String.class, this, NetworkModelTestPackage.NODE__NODE_IP);
    }
    return nodeIP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        return ((InternalEList<?>)getNodetype()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        return getNodetype();
      case NetworkModelTestPackage.NODE__NODE:
        return getNode();
      case NetworkModelTestPackage.NODE__IMAGE:
        return getImage();
      case NetworkModelTestPackage.NODE__NODE_NAME:
        return getNodeName();
      case NetworkModelTestPackage.NODE__NODE_ID:
        return getNodeID();
      case NetworkModelTestPackage.NODE__NODE_IP:
        return getNodeIP();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        getNodetype().clear();
        getNodetype().addAll((Collection<? extends NodeType>)newValue);
        return;
      case NetworkModelTestPackage.NODE__NODE:
        setNode((String)newValue);
        return;
      case NetworkModelTestPackage.NODE__IMAGE:
        setImage((String)newValue);
        return;
      case NetworkModelTestPackage.NODE__NODE_NAME:
        getNodeName().clear();
        getNodeName().addAll((Collection<? extends String>)newValue);
        return;
      case NetworkModelTestPackage.NODE__NODE_ID:
        getNodeID().clear();
        getNodeID().addAll((Collection<? extends String>)newValue);
        return;
      case NetworkModelTestPackage.NODE__NODE_IP:
        getNodeIP().clear();
        getNodeIP().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        getNodetype().clear();
        return;
      case NetworkModelTestPackage.NODE__NODE:
        setNode(NODE_EDEFAULT);
        return;
      case NetworkModelTestPackage.NODE__IMAGE:
        setImage(IMAGE_EDEFAULT);
        return;
      case NetworkModelTestPackage.NODE__NODE_NAME:
        getNodeName().clear();
        return;
      case NetworkModelTestPackage.NODE__NODE_ID:
        getNodeID().clear();
        return;
      case NetworkModelTestPackage.NODE__NODE_IP:
        getNodeIP().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        return nodetype != null && !nodetype.isEmpty();
      case NetworkModelTestPackage.NODE__NODE:
        return NODE_EDEFAULT == null ? node != null : !NODE_EDEFAULT.equals(node);
      case NetworkModelTestPackage.NODE__IMAGE:
        return IMAGE_EDEFAULT == null ? image != null : !IMAGE_EDEFAULT.equals(image);
      case NetworkModelTestPackage.NODE__NODE_NAME:
        return nodeName != null && !nodeName.isEmpty();
      case NetworkModelTestPackage.NODE__NODE_ID:
        return nodeID != null && !nodeID.isEmpty();
      case NetworkModelTestPackage.NODE__NODE_IP:
        return nodeIP != null && !nodeIP.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (node: ");
    result.append(node);
    result.append(", image: ");
    result.append(image);
    result.append(", nodeName: ");
    result.append(nodeName);
    result.append(", nodeID: ");
    result.append(nodeID);
    result.append(", nodeIP: ");
    result.append(nodeIP);
    result.append(')');
    return result.toString();
  }

} //NodeImpl
