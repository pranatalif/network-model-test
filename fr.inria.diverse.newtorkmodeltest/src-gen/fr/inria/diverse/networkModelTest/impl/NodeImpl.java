/**
 * generated by Xtext 2.16.0
 */
package fr.inria.diverse.networkModelTest.impl;

import fr.inria.diverse.networkModelTest.NetworkModelTestPackage;
import fr.inria.diverse.networkModelTest.Node;
import fr.inria.diverse.networkModelTest.NodeType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodetype <em>Nodetype</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getImage <em>Image</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodeName <em>Node Name</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodeID <em>Node ID</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.NodeImpl#getNodeIP <em>Node IP</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeImpl extends MinimalEObjectImpl.Container implements Node
{
  /**
   * The cached value of the '{@link #getNodetype() <em>Nodetype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodetype()
   * @generated
   * @ordered
   */
  protected NodeType nodetype;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected static final String IMAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected String image = IMAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getNodeName() <em>Node Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeName()
   * @generated
   * @ordered
   */
  protected static final String NODE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodeName() <em>Node Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeName()
   * @generated
   * @ordered
   */
  protected String nodeName = NODE_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getNodeID() <em>Node ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeID()
   * @generated
   * @ordered
   */
  protected static final String NODE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodeID() <em>Node ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeID()
   * @generated
   * @ordered
   */
  protected String nodeID = NODE_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getNodeIP() <em>Node IP</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeIP()
   * @generated
   * @ordered
   */
  protected static final String NODE_IP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodeIP() <em>Node IP</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeIP()
   * @generated
   * @ordered
   */
  protected String nodeIP = NODE_IP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NetworkModelTestPackage.Literals.NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeType getNodetype()
  {
    return nodetype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodetype(NodeType newNodetype, NotificationChain msgs)
  {
    NodeType oldNodetype = nodetype;
    nodetype = newNodetype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__NODETYPE, oldNodetype, newNodetype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodetype(NodeType newNodetype)
  {
    if (newNodetype != nodetype)
    {
      NotificationChain msgs = null;
      if (nodetype != null)
        msgs = ((InternalEObject)nodetype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NetworkModelTestPackage.NODE__NODETYPE, null, msgs);
      if (newNodetype != null)
        msgs = ((InternalEObject)newNodetype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NetworkModelTestPackage.NODE__NODETYPE, null, msgs);
      msgs = basicSetNodetype(newNodetype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__NODETYPE, newNodetype, newNodetype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getImage()
  {
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImage(String newImage)
  {
    String oldImage = image;
    image = newImage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__IMAGE, oldImage, image));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNodeName()
  {
    return nodeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeName(String newNodeName)
  {
    String oldNodeName = nodeName;
    nodeName = newNodeName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__NODE_NAME, oldNodeName, nodeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNodeID()
  {
    return nodeID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeID(String newNodeID)
  {
    String oldNodeID = nodeID;
    nodeID = newNodeID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__NODE_ID, oldNodeID, nodeID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNodeIP()
  {
    return nodeIP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeIP(String newNodeIP)
  {
    String oldNodeIP = nodeIP;
    nodeIP = newNodeIP;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.NODE__NODE_IP, oldNodeIP, nodeIP));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        return basicSetNodetype(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        return getNodetype();
      case NetworkModelTestPackage.NODE__NAME:
        return getName();
      case NetworkModelTestPackage.NODE__IMAGE:
        return getImage();
      case NetworkModelTestPackage.NODE__NODE_NAME:
        return getNodeName();
      case NetworkModelTestPackage.NODE__NODE_ID:
        return getNodeID();
      case NetworkModelTestPackage.NODE__NODE_IP:
        return getNodeIP();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        setNodetype((NodeType)newValue);
        return;
      case NetworkModelTestPackage.NODE__NAME:
        setName((String)newValue);
        return;
      case NetworkModelTestPackage.NODE__IMAGE:
        setImage((String)newValue);
        return;
      case NetworkModelTestPackage.NODE__NODE_NAME:
        setNodeName((String)newValue);
        return;
      case NetworkModelTestPackage.NODE__NODE_ID:
        setNodeID((String)newValue);
        return;
      case NetworkModelTestPackage.NODE__NODE_IP:
        setNodeIP((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        setNodetype((NodeType)null);
        return;
      case NetworkModelTestPackage.NODE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case NetworkModelTestPackage.NODE__IMAGE:
        setImage(IMAGE_EDEFAULT);
        return;
      case NetworkModelTestPackage.NODE__NODE_NAME:
        setNodeName(NODE_NAME_EDEFAULT);
        return;
      case NetworkModelTestPackage.NODE__NODE_ID:
        setNodeID(NODE_ID_EDEFAULT);
        return;
      case NetworkModelTestPackage.NODE__NODE_IP:
        setNodeIP(NODE_IP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.NODE__NODETYPE:
        return nodetype != null;
      case NetworkModelTestPackage.NODE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case NetworkModelTestPackage.NODE__IMAGE:
        return IMAGE_EDEFAULT == null ? image != null : !IMAGE_EDEFAULT.equals(image);
      case NetworkModelTestPackage.NODE__NODE_NAME:
        return NODE_NAME_EDEFAULT == null ? nodeName != null : !NODE_NAME_EDEFAULT.equals(nodeName);
      case NetworkModelTestPackage.NODE__NODE_ID:
        return NODE_ID_EDEFAULT == null ? nodeID != null : !NODE_ID_EDEFAULT.equals(nodeID);
      case NetworkModelTestPackage.NODE__NODE_IP:
        return NODE_IP_EDEFAULT == null ? nodeIP != null : !NODE_IP_EDEFAULT.equals(nodeIP);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", image: ");
    result.append(image);
    result.append(", nodeName: ");
    result.append(nodeName);
    result.append(", nodeID: ");
    result.append(nodeID);
    result.append(", nodeIP: ");
    result.append(nodeIP);
    result.append(')');
    return result.toString();
  }

} //NodeImpl
