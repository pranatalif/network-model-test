/**
 * generated by Xtext 2.16.0
 */
package fr.inria.diverse.networkModelTest.impl;

import fr.inria.diverse.networkModelTest.Binding;
import fr.inria.diverse.networkModelTest.NetworkModelTestPackage;
import fr.inria.diverse.networkModelTest.NodeA;
import fr.inria.diverse.networkModelTest.NodeB;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Binding</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.BindingImpl#getNodeA <em>Node A</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.BindingImpl#getNodeB <em>Node B</em>}</li>
 *   <li>{@link fr.inria.diverse.networkModelTest.impl.BindingImpl#getLinkID <em>Link ID</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BindingImpl extends MinimalEObjectImpl.Container implements Binding
{
  /**
   * The cached value of the '{@link #getNodeA() <em>Node A</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeA()
   * @generated
   * @ordered
   */
  protected NodeA nodeA;

  /**
   * The cached value of the '{@link #getNodeB() <em>Node B</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeB()
   * @generated
   * @ordered
   */
  protected NodeB nodeB;

  /**
   * The default value of the '{@link #getLinkID() <em>Link ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkID()
   * @generated
   * @ordered
   */
  protected static final String LINK_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLinkID() <em>Link ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkID()
   * @generated
   * @ordered
   */
  protected String linkID = LINK_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BindingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NetworkModelTestPackage.Literals.BINDING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeA getNodeA()
  {
    return nodeA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodeA(NodeA newNodeA, NotificationChain msgs)
  {
    NodeA oldNodeA = nodeA;
    nodeA = newNodeA;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.BINDING__NODE_A, oldNodeA, newNodeA);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeA(NodeA newNodeA)
  {
    if (newNodeA != nodeA)
    {
      NotificationChain msgs = null;
      if (nodeA != null)
        msgs = ((InternalEObject)nodeA).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NetworkModelTestPackage.BINDING__NODE_A, null, msgs);
      if (newNodeA != null)
        msgs = ((InternalEObject)newNodeA).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NetworkModelTestPackage.BINDING__NODE_A, null, msgs);
      msgs = basicSetNodeA(newNodeA, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.BINDING__NODE_A, newNodeA, newNodeA));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeB getNodeB()
  {
    return nodeB;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodeB(NodeB newNodeB, NotificationChain msgs)
  {
    NodeB oldNodeB = nodeB;
    nodeB = newNodeB;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.BINDING__NODE_B, oldNodeB, newNodeB);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeB(NodeB newNodeB)
  {
    if (newNodeB != nodeB)
    {
      NotificationChain msgs = null;
      if (nodeB != null)
        msgs = ((InternalEObject)nodeB).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NetworkModelTestPackage.BINDING__NODE_B, null, msgs);
      if (newNodeB != null)
        msgs = ((InternalEObject)newNodeB).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NetworkModelTestPackage.BINDING__NODE_B, null, msgs);
      msgs = basicSetNodeB(newNodeB, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.BINDING__NODE_B, newNodeB, newNodeB));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLinkID()
  {
    return linkID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLinkID(String newLinkID)
  {
    String oldLinkID = linkID;
    linkID = newLinkID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NetworkModelTestPackage.BINDING__LINK_ID, oldLinkID, linkID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.BINDING__NODE_A:
        return basicSetNodeA(null, msgs);
      case NetworkModelTestPackage.BINDING__NODE_B:
        return basicSetNodeB(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.BINDING__NODE_A:
        return getNodeA();
      case NetworkModelTestPackage.BINDING__NODE_B:
        return getNodeB();
      case NetworkModelTestPackage.BINDING__LINK_ID:
        return getLinkID();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.BINDING__NODE_A:
        setNodeA((NodeA)newValue);
        return;
      case NetworkModelTestPackage.BINDING__NODE_B:
        setNodeB((NodeB)newValue);
        return;
      case NetworkModelTestPackage.BINDING__LINK_ID:
        setLinkID((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.BINDING__NODE_A:
        setNodeA((NodeA)null);
        return;
      case NetworkModelTestPackage.BINDING__NODE_B:
        setNodeB((NodeB)null);
        return;
      case NetworkModelTestPackage.BINDING__LINK_ID:
        setLinkID(LINK_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NetworkModelTestPackage.BINDING__NODE_A:
        return nodeA != null;
      case NetworkModelTestPackage.BINDING__NODE_B:
        return nodeB != null;
      case NetworkModelTestPackage.BINDING__LINK_ID:
        return LINK_ID_EDEFAULT == null ? linkID != null : !LINK_ID_EDEFAULT.equals(linkID);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (linkID: ");
    result.append(linkID);
    result.append(')');
    return result.toString();
  }

} //BindingImpl
