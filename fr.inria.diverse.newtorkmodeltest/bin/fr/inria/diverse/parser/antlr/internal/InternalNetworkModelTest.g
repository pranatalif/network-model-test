/*
 * generated by Xtext 2.16.0
 */
grammar InternalNetworkModelTest;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.diverse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.services.NetworkModelTestGrammarAccess;

}

@parser::members {

 	private NetworkModelTestGrammarAccess grammarAccess;

    public InternalNetworkModelTestParser(TokenStream input, NetworkModelTestGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected NetworkModelTestGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsNodeElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleNodeElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"fr.inria.diverse.NetworkModelTest.NodeElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleNodeElement
entryRuleNodeElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeElementRule()); }
	iv_ruleNodeElement=ruleNodeElement
	{ $current=$iv_ruleNodeElement.current; }
	EOF;

// Rule NodeElement
ruleNodeElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeElementAccess().getPackageDeclarationParserRuleCall_0());
		}
		this_PackageDeclaration_0=rulePackageDeclaration
		{
			$current = $this_PackageDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeElementAccess().getImportParserRuleCall_1());
		}
		this_Import_1=ruleImport
		{
			$current = $this_Import_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeElementAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current = $this_Type_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.diverse.NetworkModelTest.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsNodeElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleNodeElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"fr.inria.diverse.NetworkModelTest.NodeElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNameSpaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNameSpace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNameSpace",
						lv_importedNameSpace_1_0,
						"fr.inria.diverse.NetworkModelTest.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getDataTypeParserRuleCall_0());
		}
		this_DataType_0=ruleDataType
		{
			$current = $this_DataType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getConfigParserRuleCall_1());
		}
		this_Config_1=ruleConfig
		{
			$current = $this_Config_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataTypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleConfig
entryRuleConfig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigRule()); }
	iv_ruleConfig=ruleConfig
	{ $current=$iv_ruleConfig.current; }
	EOF;

// Rule Config
ruleConfig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='config'
		{
			newLeafNode(otherlv_0, grammarAccess.getConfigAccess().getConfigKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConfigAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfigRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getConfigAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConfigRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getConfigAccess().getSuperTypeConfigCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getConfigAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigAccess().getNodeNodeParserRuleCall_4_0());
				}
				lv_node_5_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigRule());
					}
					add(
						$current,
						"node",
						lv_node_5_0,
						"fr.inria.diverse.NetworkModelTest.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigAccess().getBindingBindingParserRuleCall_5_0());
				}
				lv_binding_6_0=ruleBinding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigRule());
					}
					add(
						$current,
						"binding",
						lv_binding_6_0,
						"fr.inria.diverse.NetworkModelTest.Binding");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getConfigAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeAccess().getNodetypeNodeTypeParserRuleCall_0_0());
				}
				lv_nodetype_0_0=ruleNodeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeRule());
					}
					set(
						$current,
						"nodetype",
						lv_nodetype_0_0,
						"fr.inria.diverse.NetworkModelTest.NodeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='image:'
			{
				newLeafNode(otherlv_3, grammarAccess.getNodeAccess().getImageKeyword_3_0());
			}
			(
				(
					lv_image_4_0=RULE_STRING
					{
						newLeafNode(lv_image_4_0, grammarAccess.getNodeAccess().getImageSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeRule());
						}
						setWithLastConsumed(
							$current,
							"image",
							lv_image_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_5='name:'
		{
			newLeafNode(otherlv_5, grammarAccess.getNodeAccess().getNameKeyword_4());
		}
		(
			(
				lv_nodeName_6_0=RULE_STRING
				{
					newLeafNode(lv_nodeName_6_0, grammarAccess.getNodeAccess().getNodeNameSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"nodeName",
						lv_nodeName_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_7='nodeID:'
		{
			newLeafNode(otherlv_7, grammarAccess.getNodeAccess().getNodeIDKeyword_6());
		}
		(
			(
				lv_nodeID_8_0=RULE_STRING
				{
					newLeafNode(lv_nodeID_8_0, grammarAccess.getNodeAccess().getNodeIDSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"nodeID",
						lv_nodeID_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_9='eth0.IP:'
			{
				newLeafNode(otherlv_9, grammarAccess.getNodeAccess().getEth0IPKeyword_8_0());
			}
			(
				(
					lv_nodeIP_10_0=RULE_STRING
					{
						newLeafNode(lv_nodeIP_10_0, grammarAccess.getNodeAccess().getNodeIPSTRINGTerminalRuleCall_8_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeRule());
						}
						setWithLastConsumed(
							$current,
							"nodeIP",
							lv_nodeIP_10_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleNodeType
entryRuleNodeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeTypeRule()); }
	iv_ruleNodeType=ruleNodeType
	{ $current=$iv_ruleNodeType.current; }
	EOF;

// Rule NodeType
ruleNodeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_nodetype_0_1='Docker'
				{
					newLeafNode(lv_nodetype_0_1, grammarAccess.getNodeTypeAccess().getNodetypeDockerKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeTypeRule());
					}
					setWithLastConsumed($current, "nodetype", lv_nodetype_0_1, null);
				}
				    |
				lv_nodetype_0_2='OVS'
				{
					newLeafNode(lv_nodetype_0_2, grammarAccess.getNodeTypeAccess().getNodetypeOVSKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeTypeRule());
					}
					setWithLastConsumed($current, "nodetype", lv_nodetype_0_2, null);
				}
				    |
				lv_nodetype_0_3='EthSwitch'
				{
					newLeafNode(lv_nodetype_0_3, grammarAccess.getNodeTypeAccess().getNodetypeEthSwitchKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeTypeRule());
					}
					setWithLastConsumed($current, "nodetype", lv_nodetype_0_3, null);
				}
				    |
				lv_nodetype_0_4='Firefox'
				{
					newLeafNode(lv_nodetype_0_4, grammarAccess.getNodeTypeAccess().getNodetypeFirefoxKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeTypeRule());
					}
					setWithLastConsumed($current, "nodetype", lv_nodetype_0_4, null);
				}
				    |
				lv_nodetype_0_5='UbuntuDesktop'
				{
					newLeafNode(lv_nodetype_0_5, grammarAccess.getNodeTypeAccess().getNodetypeUbuntuDesktopKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeTypeRule());
					}
					setWithLastConsumed($current, "nodetype", lv_nodetype_0_5, null);
				}
				    |
				lv_nodetype_0_6='NAT'
				{
					newLeafNode(lv_nodetype_0_6, grammarAccess.getNodeTypeAccess().getNodetypeNATKeyword_0_5());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeTypeRule());
					}
					setWithLastConsumed($current, "nodetype", lv_nodetype_0_6, null);
				}
				    |
				lv_nodetype_0_7='Cloud'
				{
					newLeafNode(lv_nodetype_0_7, grammarAccess.getNodeTypeAccess().getNodetypeCloudKeyword_0_6());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeTypeRule());
					}
					setWithLastConsumed($current, "nodetype", lv_nodetype_0_7, null);
				}
			)
		)
	)
;

// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	iv_ruleBinding=ruleBinding
	{ $current=$iv_ruleBinding.current; }
	EOF;

// Rule Binding
ruleBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='bind'
		{
			newLeafNode(otherlv_0, grammarAccess.getBindingAccess().getBindKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBindingAccess().getNodeANodeAParserRuleCall_1_0());
				}
				lv_nodeA_1_0=ruleNodeA
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBindingRule());
					}
					set(
						$current,
						"nodeA",
						lv_nodeA_1_0,
						"fr.inria.diverse.NetworkModelTest.NodeA");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='and'
		{
			newLeafNode(otherlv_2, grammarAccess.getBindingAccess().getAndKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBindingAccess().getNodeBNodeBParserRuleCall_3_0());
				}
				lv_nodeB_3_0=ruleNodeB
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBindingRule());
					}
					set(
						$current,
						"nodeB",
						lv_nodeB_3_0,
						"fr.inria.diverse.NetworkModelTest.NodeB");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='with'
		{
			newLeafNode(otherlv_4, grammarAccess.getBindingAccess().getWithKeyword_4());
		}
		otherlv_5='linkID:'
		{
			newLeafNode(otherlv_5, grammarAccess.getBindingAccess().getLinkIDKeyword_5());
		}
		(
			(
				lv_linkID_6_0=RULE_STRING
				{
					newLeafNode(lv_linkID_6_0, grammarAccess.getBindingAccess().getLinkIDSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBindingRule());
					}
					setWithLastConsumed(
						$current,
						"linkID",
						lv_linkID_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleNodeA
entryRuleNodeA returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeARule()); }
	iv_ruleNodeA=ruleNodeA
	{ $current=$iv_ruleNodeA.current; }
	EOF;

// Rule NodeA
ruleNodeA returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getNodeAAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeARule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeAAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_eth_2_0=RULE_ID
				{
					newLeafNode(lv_eth_2_0, grammarAccess.getNodeAAccess().getEthIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeARule());
					}
					setWithLastConsumed(
						$current,
						"eth",
						lv_eth_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNodeB
entryRuleNodeB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeBRule()); }
	iv_ruleNodeB=ruleNodeB
	{ $current=$iv_ruleNodeB.current; }
	EOF;

// Rule NodeB
ruleNodeB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getNodeBAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeBRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeBAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_eth_2_0=RULE_ID
				{
					newLeafNode(lv_eth_2_0, grammarAccess.getNodeBAccess().getEthIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeBRule());
					}
					setWithLastConsumed(
						$current,
						"eth",
						lv_eth_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
