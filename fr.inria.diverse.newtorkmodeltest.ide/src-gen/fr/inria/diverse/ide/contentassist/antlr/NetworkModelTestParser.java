/*
 * generated by Xtext 2.16.0
 */
package fr.inria.diverse.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.inria.diverse.ide.contentassist.antlr.internal.InternalNetworkModelTestParser;
import fr.inria.diverse.services.NetworkModelTestGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class NetworkModelTestParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(NetworkModelTestGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, NetworkModelTestGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getNodeElementAccess().getAlternatives(), "rule__NodeElement__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getNodeTypeAccess().getNodetypeAlternatives_0(), "rule__NodeType__NodetypeAlternatives_0");
			builder.put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
			builder.put(grammarAccess.getConfigAccess().getGroup(), "rule__Config__Group__0");
			builder.put(grammarAccess.getConfigAccess().getGroup_2(), "rule__Config__Group_2__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup_3(), "rule__Node__Group_3__0");
			builder.put(grammarAccess.getNodeAccess().getGroup_8(), "rule__Node__Group_8__0");
			builder.put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
			builder.put(grammarAccess.getNodeAAccess().getGroup(), "rule__NodeA__Group__0");
			builder.put(grammarAccess.getNodeBAccess().getGroup(), "rule__NodeB__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_3(), "rule__PackageDeclaration__ElementsAssignment_3");
			builder.put(grammarAccess.getImportAccess().getImportedNameSpaceAssignment_1(), "rule__Import__ImportedNameSpaceAssignment_1");
			builder.put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
			builder.put(grammarAccess.getConfigAccess().getNameAssignment_1(), "rule__Config__NameAssignment_1");
			builder.put(grammarAccess.getConfigAccess().getSuperTypeAssignment_2_1(), "rule__Config__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getConfigAccess().getNodeAssignment_4(), "rule__Config__NodeAssignment_4");
			builder.put(grammarAccess.getConfigAccess().getBindingAssignment_5(), "rule__Config__BindingAssignment_5");
			builder.put(grammarAccess.getNodeAccess().getNodetypeAssignment_0(), "rule__Node__NodetypeAssignment_0");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getImageAssignment_3_1(), "rule__Node__ImageAssignment_3_1");
			builder.put(grammarAccess.getNodeAccess().getNodeNameAssignment_5(), "rule__Node__NodeNameAssignment_5");
			builder.put(grammarAccess.getNodeAccess().getNodeIDAssignment_7(), "rule__Node__NodeIDAssignment_7");
			builder.put(grammarAccess.getNodeAccess().getNodeIPAssignment_8_1(), "rule__Node__NodeIPAssignment_8_1");
			builder.put(grammarAccess.getNodeTypeAccess().getNodetypeAssignment(), "rule__NodeType__NodetypeAssignment");
			builder.put(grammarAccess.getBindingAccess().getNodeAAssignment_1(), "rule__Binding__NodeAAssignment_1");
			builder.put(grammarAccess.getBindingAccess().getNodeBAssignment_3(), "rule__Binding__NodeBAssignment_3");
			builder.put(grammarAccess.getBindingAccess().getLinkIDAssignment_6(), "rule__Binding__LinkIDAssignment_6");
			builder.put(grammarAccess.getLinkIDAccess().getLinkIDAssignment(), "rule__LinkID__LinkIDAssignment");
			builder.put(grammarAccess.getNodeAAccess().getNameAssignment_0(), "rule__NodeA__NameAssignment_0");
			builder.put(grammarAccess.getNodeAAccess().getEthAssignment_2(), "rule__NodeA__EthAssignment_2");
			builder.put(grammarAccess.getNodeBAccess().getNameAssignment_0(), "rule__NodeB__NameAssignment_0");
			builder.put(grammarAccess.getNodeBAccess().getEthAssignment_2(), "rule__NodeB__EthAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private NetworkModelTestGrammarAccess grammarAccess;

	@Override
	protected InternalNetworkModelTestParser createParser() {
		InternalNetworkModelTestParser result = new InternalNetworkModelTestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public NetworkModelTestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(NetworkModelTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
